
-- V.1.4 BETA paradigm. By IceCrow14

-- "Pending"

-- This sucks... For safety, avoid using Base 85 conversion functions from the client to the server

clua_version = 2.042

set_callback("map load", "OnGameStart")
set_callback("rcon message", "OnRcon")

tag_collection_module = require("uais_shared_tag_collection_a_1_0")
tag_manipulation_module = require("uais_shared_tag_manipulation_a_1_0")
object_table_module = require("uais_shared_object_table_a_1_0")
data_compression_module = require("uais_shared_data_compression_a_1_0")
globals_module = require("uais_globals_a_1_0")

bipeds = {} -- NOTE: Must reset after each OnGameStart callback

weapons = {} -- Testing

function OnGameStart()

	-- Pending: Protected map check

	bipeds = {}

	weapons = {} -- Testing

	if server_type == "dedicated" then
		tag_collection_module.LoadTagTables(2)
		tag_manipulation_module.TagManipulationClientSide(2, tag_collection_module.scnr_tag_data(), tag_collection_module.bipd_tag_paths(), tag_collection_module.vehi_tag_paths())
		data_compression_module.LoadCharValuesTable()
	end

end

function OnRcon(Message)
	if string.len(Message) >= 3 then
		local hash_char = string.sub(Message, 1, 1)
		local object_char = string.sub(Message, 2, 2)
		local action_char = string.sub(Message, 3, 3)
		if hash_char == "@" then -- Main RCON handle
			if object_char == "b" then
				if action_char == "d" then -- Static format
					DeleteBiped(Message)
				elseif action_char == "c" then -- Static
					CreateBiped(Message)
				elseif action_char == "k" then -- Static
					KillBiped(Message)
				elseif action_char == "u" then -- Dynamic
					-- Pending: "u"
					UpdateBiped(Message)
				end
				--console_out(action_char)
				return false
			else
				if Message == globals_module.rc_handshake_message then
					AnswerHandshake()
				end
			end
		end
	end
end

-- Additional functions:

-- Migrated from the Handshake module
function AnswerHandshake()
	execute_script("rcon "..globals_module.rc_password.." "..globals_module.rc_handshake_message)
end

-- Local
function CreateBiped(Message)
	local packet_object_index = string.sub(Message, 4, 7)
	local packet_x = string.sub(Message, 12, 16)
	local packet_y = string.sub(Message, 17, 21)
	local packet_z = string.sub(Message, 22, 26)
	local packet_pitch = string.sub(Message, 27, 31)
	local packet_yaw = string.sub(Message, 32, 36)
	local packet = "@bc"..packet_object_index

	local object_index = data_compression_module.HexToNumber( packet_object_index )
	local tag_index = data_compression_module.HexToNumber( string.sub(Message, 8, 11) )

	local weapon_tag_index = data_compression_module.HexToNumber( string.sub(Message, 37, 40) ) -- NOTE: New, testing

	local x = data_compression_module.Dword32ToFloat( data_compression_module.Base85ToNumber( packet_x ) )
	local y = data_compression_module.Dword32ToFloat( data_compression_module.Base85ToNumber( packet_y ) )
	local z = data_compression_module.Dword32ToFloat( data_compression_module.Base85ToNumber( packet_z ) )
	local pitch = data_compression_module.Dword32ToFloat( data_compression_module.Base85ToNumber( packet_pitch ) )
	local yaw = data_compression_module.Dword32ToFloat( data_compression_module.Base85ToNumber( packet_yaw ) )

	if not bipeds[object_index] then

		object_table_module.HideAutoGeneratedBipeds(bipeds) -- NOTE: Test if always works, or if should be placed after

		bipeds[object_index] = spawn_object("bipd", tag_collection_module.bipd_tag_paths()[tag_index], x, y, z)
		local object_id = bipeds[object_index]
		local object_address = get_object(object_id)
		write_bit(object_address + 0x106, 11, 1) -- Make invincible, rotate as indicated and answer with new RCON packet
		write_float(object_address + 0x74, pitch)
		write_float(object_address + 0x78, yaw)

		if weapon_tag_index ~= 0 then

			local weapon_tag_path = tag_collection_module.weap_tag_paths()[weapon_tag_index]
			if weapon_tag_path then -- Truly necessary?

				weapons[object_index] = spawn_object("weap", weapon_tag_path, x, y, z)

				local weapon = weapons[object_index]
				local weapon_object_address = get_object(weapon)
				if weapon_object_address then -- Just for caution
					write_dword(object_address + 0x2F8, weapon) -- Set weapon as primary
					-- write_word(object_address + 0x2F2, 0) -- Set weapon slot to primary
					write_bit(weapon_object_address + 0x1F4, 0, 1) -- Set as in inventory
				end

				-- Set coords to 0? Biped origin?
				
			end

			-- console_out("")

		end

	end
	execute_script("rcon "..globals_module.rc_password.." "..packet)
end

function DeleteBiped(Message)
	local packet_object_index = string.sub(Message, 4, 7)
	local packet = "@bd"..packet_object_index
	local object_index = data_compression_module.HexToNumber( packet_object_index )
	local biped = bipeds[object_index]
	if biped then
		local object_address = get_object(biped)
		if object_address then

			-- Pending: Delete weapon, if any. Needs testing
			local weapon = weapons[object_index]
			if weapon then
				local weapon_object_address = get_object(weapon)
				if weapon_object_address then
					delete_object(weapon)
				end
			end

			delete_object(biped)
		end
	end
	execute_script("rcon "..globals_module.rc_password.." "..packet)
end

function KillBiped(Message)
	local packet_object_index = string.sub(Message, 4, 7)
	local packet = "@bk"..packet_object_index
	local object_index = data_compression_module.HexToNumber( packet_object_index )
	local biped = bipeds[object_index]
	if biped then
		local object_address = get_object(biped)
		if object_address then

			-- Pending: Delete weapon, if any. Needs testing
			local weapon = weapons[object_index]
			if weapon then
				local weapon_object_address = get_object(weapon)
				if weapon_object_address then
					delete_object(weapon)
				end
			end

			write_float(object_address + 0xE0, 0) -- Health = 0
			write_bit(object_address + 0x106, 11, 0) -- Invincible = false
			write_bit(object_address + 0x106, 2, 1) -- Health empty = true
			-- write_bit(object_address + 0x106, 4, 1) -- NOTE: Possible "shield down" bit? = true

		end
	end
	execute_script("rcon "..globals_module.rc_password.." "..packet)
end

-- LAST DAMN FUNCTION

--[[function UpdateBiped(Message)
	local packet_object_index = string.sub(Message, 4, 7)
	local packet_update_request_bitmask = string.sub(Message, 8, 8)

	local packet_x
	local packet_y
	local packet_z
	local packet_pitch
	local packet_yaw

	local object_index = data_compression_module.HexToNumber( packet_object_index )
	local update_request_bitmask = data_compression_module.PrintableCharToInteger6( packet_update_request_bitmask, true )

	if update_request_bitmask[1] == 1 then
		-- Position data included
		packet_x = string.sub(Message, 9, 13)
		packet_y = string.sub(Message, 14, 18)
		packet_z = string.sub(Message, 19, 23) -- PENDING: Write (as DWORDS) to memory. Done?

		if update_request_bitmask[2] == 1 then
			-- Rotation data included
			packet_pitch = string.sub(Message, 24, 28)
			packet_yaw = string.sub(Message, 29, 33)
		end

	else

		if update_request_bitmask[2] == 1 then
			-- Rotation data included
			packet_pitch = string.sub(Message, 9, 13)
			packet_yaw = string.sub(Message, 14, 18)
		end
	end

	local biped = bipeds[object_index]
	if biped then
		local object_address = get_object(biped)
		if object_address then

			local dword_x
			local dword_y
			local dword_z
			local dword_pitch
			local dword_yaw

			if packet_x then
				dword_x = data_compression_module.Base85ToNumber( packet_x )
				write_dword(object_address + 0x5C, dword_x)
			end
			if packet_y then
				dword_y = data_compression_module.Base85ToNumber( packet_y )
				write_dword(object_address + 0x60, dword_y)
			end
			if packet_z then
				dword_z = data_compression_module.Base85ToNumber( packet_z )
				write_dword(object_address + 0x64, dword_z)
			end
			if packet_pitch then
				dword_pitch = data_compression_module.Base85ToNumber( packet_pitch )
				write_dword(object_address + 0x74, dword_pitch)
			end
			if packet_yaw then
				dword_yaw = data_compression_module.Base85ToNumber( packet_yaw )
				write_dword(object_address + 0x78, dword_yaw)
			end

		end
	end

	-- Finish, lookup server-side script.

end]]

function UpdateBiped(Message)
	local packet_object_index = string.sub(Message, 4, 7)
	local packet_update_request_bitmask = string.sub(Message, 8, 8)

	local packet_x -- REMINDER: Write floats as DWORDS
	local packet_y
	local packet_z
	local packet_pitch
	local packet_yaw
	local packet_animation

	local object_index = data_compression_module.HexToNumber( packet_object_index )
	local update_request_bitmask = data_compression_module.PrintableCharToInteger6( packet_update_request_bitmask, true )

	if update_request_bitmask[1] == 1 then
		packet_x = string.sub(Message, 9, 13)
		packet_y = string.sub(Message, 14, 18)
		packet_z = string.sub(Message, 19, 23)
		if update_request_bitmask[2] == 1 then
			packet_pitch = string.sub(Message, 24, 28)
			packet_yaw = string.sub(Message, 29, 33)
			if update_request_bitmask[3] == 1 then
				packet_animation = string.sub(Message, 34, 37)
			end
		else
			if update_request_bitmask[3] == 1 then
				packet_animation = string.sub(Message, 24, 27)
			end
		end
	else
		if update_request_bitmask[2] == 1 then
			packet_pitch = string.sub(Message, 9, 13)
			packet_yaw = string.sub(Message, 14, 18)
			if update_request_bitmask[3] == 1 then
				packet_animation = string.sub(Message, 19, 22)
			end
		else
			if update_request_bitmask[3] == 1 then
				packet_animation = string.sub(Message, 9, 12)
			end
		end
	end

	local biped = bipeds[object_index]
	if biped then
		local object_address = get_object(biped)
		if object_address then

			local dword_x
			local dword_y
			local dword_z
			local dword_pitch
			local dword_yaw

			local word_animation

			if packet_x then
				dword_x = data_compression_module.Base85ToNumber( packet_x )
				write_dword(object_address + 0x5C, dword_x)
			end
			if packet_y then
				dword_y = data_compression_module.Base85ToNumber( packet_y )
				write_dword(object_address + 0x60, dword_y)
			end
			if packet_z then
				dword_z = data_compression_module.Base85ToNumber( packet_z )
				write_dword(object_address + 0x64, dword_z)
			end
			if packet_pitch then
				dword_pitch = data_compression_module.Base85ToNumber( packet_pitch )
				write_dword(object_address + 0x74, dword_pitch)
			end
			if packet_yaw then
				dword_yaw = data_compression_module.Base85ToNumber( packet_yaw )
				write_dword(object_address + 0x78, dword_yaw)
			end
			if packet_animation then
				word_animation = data_compression_module.HexToNumber( packet_animation )
				write_word(object_address + 0xD2, 0) -- Current frame of the base animation
				write_word(object_address + 0xD0, word_animation) -- Base animation
			end

		end
	end

end