-- Yeah. I know what this does, or at least should... No need to write it twice.
-- "NOTE"

module_table = {}

local module_console_name = "UAIS (Object table hook $)"
local module_console_color = 0xF

local client_1_10_object_table_address = 0x400506B4 -- Credits to Devieth
local sapp_1_10_object_table_address

-- Functions

function LoadSAPPObjectTableAddress()
	sapp_1_10_object_table_address = read_dword(read_dword(sig_scan("8B0D????????8B513425FFFF00008D") + 2)) -- Credits to Devieth.
	cprint(module_console_name..": ".."SAPP object table address loaded!", module_console_color)
end

function GetObjects(API, ObjectType, Items) 
	-- API: 1 = SAPP, 2 = Chimera
	-- ObjectType: 0 = Bipeds, 1 = Vehicles (possible values for an object's "type" variable)
	-- Items: 1 = Object IDs, 2 = Object memory addresses, 3 = Both (see further)
	local final_object_ids = {}
	local final_object_addresses = {}
	local object_count
	local object_base
	if API == 1 then
		if not sapp_1_10_object_table_address then
			LoadSAPPObjectTableAddress()
		end
		object_count = read_word(sapp_1_10_object_table_address + 0x2E)
		object_base = read_dword(sapp_1_10_object_table_address + 0x34)
	elseif API == 2 then
		object_count = read_word(client_1_10_object_table_address + 0x2E)
		object_base = read_dword(client_1_10_object_table_address + 0x34)
	end
	for i = 0, object_count - 1 do
		local object_address = read_dword(object_base + i * 0xC + 0x8)
		local object_id = read_word(object_base + i * 12) * 0x10000 + i
		if object_address ~= 0 then
			local object_type = read_word(object_address + 0xB4)
			if object_type == ObjectType then
				if Items == 1 then
					table.insert(final_object_ids, object_id)
				elseif Items == 2 then
					table.insert(final_object_addresses, object_address)
				elseif Items == 3 then
					table.insert(final_object_ids, object_id)
					table.insert(final_object_addresses, object_address)
				end
			end
		end
	end
	if Items == 1 then -- Output
		return final_object_ids
	elseif Items == 2 then
		return final_object_addresses
	elseif Items == 3 then
		return {final_object_ids, final_object_addresses}
	end
end

function HideAutoGeneratedBipeds(UAISClientSyncedBipeds) -- NOTE: Chimera API specific
	local total_bipeds = GetObjects(2, 0, 1)
	for k, v in pairs(total_bipeds) do
		local automatically_generated = true
		for i, b in pairs(UAISClientSyncedBipeds) do
			if v == b then
				automatically_generated = false
				break
			end
		end
		if automatically_generated then
			local object_address = get_object(v)
			if object_address then
				local player_id = read_dword(object_address + 0xC0)
				if player_id == 0xFFFFFFFF then -- NOTE: Might also hide player corpses, minor issue that could be fixed later
					write_bit(object_address + 0x10, 0, 1) -- Ghost mode = True
					write_bit(object_address + 0x10, 24, 1) -- No collision = True
				end
			end
		end
	end
end

-- NOTE: Module setup

module_table.GetObjects = GetObjects
module_table.HideAutoGeneratedBipeds = HideAutoGeneratedBipeds

return module_table